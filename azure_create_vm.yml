---
# ============================================================= PLAY =====================================================
# run this on localhost without connection local
# to get access to the tower machine credential data
# create a dummy host in the in memory inventory and
# store the machine credentials as inventory vars
# these can then be retrieved across plays in this
# playbook.

- name: Retrieve admin credentials
  hosts: localhost
  gather_facts: no
  tasks:
  - name: add dummy host with machine credential in inventory
    add_host:
      name: "dummy"
      admin_username: "{{ansible_user}}"
      admin_password: "{{ansible_password}}"

# ============================================================= PLAY =====================================================
# This playbook will create a VM in Azure
# Inputs:
# - vm_name: the name part of the fqdn
# - os_type: linux or windows
# - admin_username: The username of a to be created local administrator
# - admin_password: The password that admin_username will get
# - role: The role for this server. This is needed to open firewall ports in Azure (not in the VM itself)
#         webserver / dbserver / lbserver / dcserver

  # the name of this playbook. You see this back in the default logging
- name: Azure Create VM

  # There is no concepts of hosts in a public cloud. We use localhost to specify that this playbook runs from the
  # Ansible execution host (engine or tower).
  hosts: localhost
  
  # likewise, since we use the Azure API, there is no concept of a connection. Thus we specify local
  connection: local

  # Also, there is no need to gather facts from the localhost (which speeds things up)
  gather_facts: no

  # this is a way to specify files that contain vars
  vars_files:
    # here we include a var file from a sub directory "files"
    files/azure_vars
  
  # this is to specify vars as part of this playbook
  vars:
    # script to run inside the VM when windows VM has been provisioned (aka cloud-init) 
    winrm_enable_script: "Invoke-Expression -Command ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1')); Enable-WSManCredSSP -Role Server -Force"

    # Example of creating an array
    ports:
      webserver: "80"
      lbserver: "80,8080"
      dbserver: "3306"
      monserver: "80"

    #example to getting an element from an array
    role_ports: "{{ ports[role] }}"

    # construct a unique name
    azure_vm_name: "{{ project }}-{{ vm_name }}"

  # We now start the tasks that must be executed in order
  tasks:
      
  # the name of a task. You see this back in de default logging
  - name: Define OS type specific vars
  
    # An example of including a file whos name is dynamic
    include_vars: "files/azure_vm_{{ os_type | lower }}_vars"

  # construct a var from multiple other vars
  - name: Define Role specific ports
    set_fact:
      arm_ports: "{{ arm_ports }},{{ ports[role] }}"
      
  # Example of logging output. Here is only runs when the verbosity level is 1
  - name: Report on ports that will be opened
    debug:
      msg: "Ports to open: {{ arm_ports }} Username: {{ ansible_username }} Password: {{ ansible_password }}"
      verbosity: 1

  - name: Provision new Azure virtual host
    # Here we call the azure module to create a virtual machine
    azure_rm_virtualmachine:
      admin_username: "{{ hostvars['dummy'].admin_username }}"
      admin_password: "{{ hostvars['dummy'].admin_password }}"
      os_type: '{{ os_type }}'
      image:
        offer: '{{ arm_offer }}'
        publisher: '{{ arm_publisher }}'
        sku: '{{ arm_sku }}'
        version: 'latest'
      name: '{{ azure_vm_name }}'
      resource_group: '{{ project }}'
      state: present
      vm_size: '{{ arm_size }}'
      open_ports: '{{ arm_ports }}'
      virtual_network_name: '{{ project }}'
      network_interface_names: '{{ azure_vm_name }}'
      subnet_name: '{{ project }}'
      tags:
          project: '{{ project }}'
          role: '{{ role }}'
    register: azure_vm

  # Because Ansible needs winrm we must add it using an azure vm extension
  - name: Create Azure vm extension to enable HTTPS WinRM listener
    azure_rm_virtualmachineextension:
      name: winrm-extension
      resource_group: '{{ project }}'
      virtual_machine_name: '{{ project }}-{{ vm_name }}'
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: "1.9"
      settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass {{winrm_enable_script}}"}'
      auto_upgrade_minor_version: true
    when: os_type == "Windows"

  # Example of a way to wait before a resource comes online. Can also work with files on a machine.
  - name: Wait for the WinRM port to come online
    wait_for:
      port: 5986
      host: '{{azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress}}'
      timeout: 600
    when: os_type == "Windows"
    
